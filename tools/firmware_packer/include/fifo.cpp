//----------------------------------------------------------------------------------------------------------//
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//    I BBMMBB      BBMMBBI     BBI EEMMFFI BBMMI     BBI EEMMFFI BBMMI       BBMMBBI   EEMMI EEMMLL        //
//    EEI   EEFF  EEI   LLBB  EEMMBBI I BBEE  I EE  EEMMBBI I BBEE  I EE    EEI   LLBB    EEBBI I BB        //
//  I FF        I EE      BBI   EEI     EEI   I EE    EEI     EEI   I EE  I EE      BBI   EEI   I EE        //
//  LLFF        LLEE      EELL  EEI     EEI   I EE    EEI     EEI   I EE  LLEE      EELL  EEI   I EE        //
//  I EE      I I BB      EEI   EEI     EEI   I EE    EEI     EEI   I EE  I BB      EEI   EEI   I EE        //
//    BBLL  I I   BBFF  I EE    EEI     EEI   I BB    EEI     EEI   I BB    BBFF  I EE    BBI   I EE        //
//    I BBMMEE    I BBMMBB    EEMMMMLLBBMMBBLLMMMMEEEEMMMMLLBBMMBBLLMMMMEE  I BBMMBB    EEMMMMLLBBMMBB      //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//----------------------------------------------------------------------------------------------------------//
//                                                                                                          //
//                                                Scott System                                              //
//                                                                                                          //
//                               (c) Copyright 2006-2007, Scottyu China                                     //
//                                                                                                          //
//                                           All Rights Reserved                                            //
//                                                                                                          //
// File    : fifo.cpp                                                                                       //
// By      : scottyu                                                                                        //
// Version : V1.00                                                                                          //
// Time    : 2008-07-15 15:30:22                                                                            //
//         :                                                                                                //
//----------------------------------------------------------------------------------------------------------//
//                                                                                                          //
// HISTORY                                                                                                  //
//                                                                                                          //
// 1 2008-07-15 15:30:22                                                                                    //
//                                                                                                          //
//                                                                                                          //
//                                                                                                          //
//----------------------------------------------------------------------------------------------------------//



#ifndef ___FIFO__C______
#define ___FIFO__C______


//------------------------------------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------------------------------------

#include "error.h"

#include "fifo.h"


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
FIFO * CreateFifo(u32 blocksize, u32 blocknum, u32 type)
{
	FIFO * fifo 	= NULL;
	fifo 			=(FIFO *)malloc(sizeof(FIFO));
	if (!fifo)
		return NULL;
		
	fifo->ptr		= NULL;
	fifo->Type		= type;	//应用来进行设置,可以用来说明数据类型
	fifo->BlockSize	= blocksize;
	fifo->BlockNum	= blocknum;
	fifo->iWrite		= 0;	//从0开始写数据到了BlockNum后回头写
	fifo->iRead		= 0;	//0表示目前无数据可读，其他同上

	//然后分配缓冲区内存	
	fifo->ptr = (u8 *)malloc(blocksize * blocknum);	
	if (!fifo->ptr)
	{
		free(fifo);
		fifo = NULL;	
		return NULL;
	}
	return fifo;
}

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     缓冲区使用结束后应释放内存
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 ReleaseFifo(FIFO * fifo)
{
	if (!fifo)
		return __LINE__;
	
	free(fifo->ptr);
	free(fifo);
	
	return OK;	
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 FifoNum(FIFO * fifo)
{
	return fifo->BlockNum;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 FifoSize(FIFO * fifo)
{
	return fifo->BlockSize;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 FifoFree(FIFO * fifo)
{
	return fifo->BlockNum - (fifo->iWrite - fifo->iRead);
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 FifoUsed(FIFO * fifo)
{
	return fifo->iWrite - fifo->iRead;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 WriteFifo(FIFO * fifo, u8 * buffer, u32 size)
{
	if (size != fifo->BlockSize)
	{
		Msg("Invalid size %d\n", size);
		return __LINE__;
	}
	//算法定义：只要有数据就写到缓冲区，每个数据包的前面加上数据包类型标志	
	if ((fifo->iWrite - fifo->iRead) < fifo->BlockNum)
	{	
		memcpy((fifo->ptr + fifo->BlockSize * (fifo->iWrite % fifo->BlockNum)), 
			   buffer, size);
		fifo->iWrite++;	
		return OK;
	}
	else
	{
		Msg("No space in fifo \n");
		return __LINE__;
	}
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     从缓冲区读数据的算法
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 ReadFifo(FIFO * fifo, u8 * buffer, u32 size)
{
	if (size != fifo->BlockSize)
	{
		Msg("Invalid size %d\n", size);
		return __LINE__;
	}
	if ((fifo->iWrite - fifo->iRead) >= 1)
	{
		memcpy(buffer, 
			   fifo->ptr + (fifo->iRead % fifo->BlockNum) * fifo->BlockSize,
			   size);

		fifo->iRead++;
		return OK;
	}
	else
	{
		Msg("empty fifo can't iRead\n");
		return __LINE__;
	}
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 CleanFifo(FIFO * fifo)
{
	fifo->iRead = fifo->iWrite;
	return OK;
}


//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 IsFifoFull(FIFO * fifo)
{
	if ((fifo->iWrite - fifo->iRead) == fifo->BlockNum)
		return OK;
		
	return __LINE__;
}

//------------------------------------------------------------------------------------------------------------
//
// 函数说明
//     
//
// 参数说明
//     无
//
// 返回值
//     无
//
// 其他
//     无
//
//------------------------------------------------------------------------------------------------------------
u32 IsFifoEmpty(FIFO * fifo)
{
	if ((fifo->iWrite - fifo->iRead) == 0)
		return OK;
		
	return __LINE__;
}


//------------------------------------------------------------------------------------------------------------
// THE END !
//------------------------------------------------------------------------------------------------------------

#endif //___FIFO__C______
